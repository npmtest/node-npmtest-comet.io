{"/home/travis/build/npmtest/node-npmtest-comet.io/test.js":"/* istanbul instrument in package npmtest_comet_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-comet.io/lib.npmtest_comet.io.js":"/* istanbul instrument in package npmtest_comet_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_comet_io = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_comet_io = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-comet.io/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-comet.io && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_comet_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_comet_io\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_comet_io.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_comet_io.rollup.js'] =\n            local.assetsDict['/assets.npmtest_comet_io.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_comet_io.__dirname + '/lib.npmtest_comet_io.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-comet.io/node_modules/comet.io/lib/comet.io.js":"// Copyright Satoshi Nakajima (@snakajima)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n(function(module_) {\n  var module = module_ || require.register('comet.io');\n  var exports = module.exports;\n \n  var util = require('util');\n  var URL = require('url');\n  var events = require('events');\n  var fs = require('fs');\n\n  function Socket(uuid) {\n    this._uuid = uuid;\n    this._queue = [];\n  }\n  util.inherits(Socket, events.EventEmitter);\n \n  // the app-specific property (optional), which will make it easy to debug\n  Socket.prototype.name = '.';\n \n  Socket.prototype._emit = events.EventEmitter.prototype.emit;\n \n  Socket.prototype.emit = function(event, params) {\n    var self = this;\n    // Special case for events generated by EventEmitter\n    if (event == 'newListener') {\n      self._emit(event, params);\n      return;\n    }\n\n    // We MUST clean up the refreshing timer here\n    if (self._refresher) {\n      console.log('comet: clear refresher');\n      clearTimeout(self._refresher);\n      delete self._refresher;\n    }\n\n    var payload = JSON.stringify( { event:event, params:params } );\n    if (self._response) {\n      //console.debug('comet: sending an event %s to %s (%s)', event, self.name\n      //  /*, process._ios.objectID(self._response._socket)*/);\n      self._response.writeHead(200, {\n            // UTF-8 issue\n            // 'Content-Length':payload.length,\n            'content-type':'application/json',\n            'Cache-Control': 'no-cache' } );\n      self._response.end(payload);\n      delete self._response;\n    } else {\n      console.log('comet: queuing an event %s for %s', event, self.name);\n      self._queue.push(payload);\n    }\n  };\n \n  function Server() {\n    this._sockets = {}; // uuid:socket pairs\n  }\n  util.inherits(Server, events.EventEmitter);\n \n  // Generate locally unique ID during the lifetime of this application\n  var unique_id = (function() {\n    var seed = 0;\n    return function() {\n      var id = (new Date()).getTime() + '-' + (seed++).toString();\n      seed %= 10000;\n      return id;\n    };\n  })();\n\n  Server.prototype.serve = function(req, res) {\n    var self = this;\n    var ret = false;\n    var url = URL.parse(req.url, true);\n    var result = RegExp('^\\/_comet\\.io\\/([a-zA-Z0-9\\s\\._-]+)$').exec(url.pathname);\n    if (result) {\n      var cmd = result[1];\n      //console.log('push.io: ' + cmd);\n      if (cmd == '_connect') {\n        var uuid = unique_id();;\n        var socket = new Socket(uuid);\n        self._sockets[uuid] = socket;\n        console.log('comet: ++sockets = ' + Object.keys(self._sockets).length);\n        var payload = JSON.stringify( { uuid:uuid } );\n        res.writeHead(200, { 'Content-Length':payload.length } );\n        res.end(payload);\n        self.emit('connection', socket);\n      } else if (cmd == '_wait') {\n        var socket = self._sockets[url.query.uuid];\n        if (socket) {\n          if (socket._queue.length > 0) {\n            // We already have something pending in the queue. Send it now. (LATER: them?)\n            console.log('comet dequeueing for %s', socket.name);\n            var payload = socket._queue.shift();\n            // UTF-8 issue\n            res.writeHead(200, { /* 'Content-Length':payload.length  */ });\n            res.end(payload);\n          } else {\n            // Queue is empty. Let the client wait untile we have something to send.\n            socket._response = res;\n            console.log('comet: waiting... (%s)', socket.name);\n \n            // Refresher sends an empty commet message after N secs to keep it fresh.\n            var refresher = function() {\n              if (socket._response) {\n                var payload = JSON.stringify({});\n                socket._response.writeHead(200, { 'Content-Length':payload.length } );\n                socket._response.end(payload);\n                console.log('comet: sending an empty message to keep it fresh (%s, %d)', socket.name, payload.length);\n              }\n              delete socket._refresher;\n            };\n            socket._refresher = setTimeout(refresher, 30000);\n \n            // Handle special case\n            res.on('close', function() {\n              console.log('coment client terminate the connection first (%s)', socket.name\n                  /*,\n                  process._ios.objectID(socket._response._socket), process._ios.objectID(res._socket)*/);\n              // Client terminate the connection first\n              delete socket._response;\n              \n              // This socket became a zombi, terminate it unless it reconnects within 1 sec\n              socket._zombi = true;\n              setTimeout(function() {\n                if (socket._zombi) {\n                  delete self._sockets[socket._uuid];\n                  console.log('comet: terminated a zombi (%s) --count = %d',\n                              socket.name, Object.keys(self._sockets).length);\n                  socket._emit('disconnect');\n                }\n              }, 1000);\n            });\n          }\n        } else {\n          console.error('comet/_wait: no socket for %s', url.query.uuid);\n        }\n      } else if (cmd == 'comet.io.client.js') {\n        fs.readFile(__dirname + '/comet.io.client.js', 'utf8', function(err, data) {\n          if (err) {\n            console.log(err);\n          }\n          res.writeHead(200, { 'Content-Type':'text/javascript' } );\n          res.end(data);\n        });\n      } else {\n        var socket = self._sockets[url.query._uuid];\n        var code = 200;\n        if (socket) {\n          socket._emit(cmd, url.query);\n        } else {\n          console.error('comet/%s: no socket for %s', cmd, url.query.uuid);\n          code = 404; // not found\n        }\n        var payload = JSON.stringify({});\n        res.writeHead(code, { 'Content-Length':payload.length } ); // REVIEW: not unicode safe!\n        res.end(payload);\n      }\n      ret = true;\n    }\n    return ret;\n  };\n \n  exports.createServer = function() {\n    return new Server();\n  };\n})(typeof module != 'undefined' ? module : null);\n","/home/travis/build/npmtest/node-npmtest-comet.io/node_modules/comet.io/lib/comet.io.client.js":"// Copyright Satoshi Nakajima (@snakajima)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar comet = (function() {\n\n  var isArray = $.isArray;\n\n  var util = {};\n  util.inherits = function(ctor, superCtor) {\n    ctor.super_ = superCtor;\n    ctor.prototype = new superCtor();\n    /*\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    */\n  };\n\n  function EventEmitter() {\n  }\n  var defaultMaxListeners = 10;\n\n  EventEmitter.prototype.emit = function() {\n    var type = arguments[0];\n\n    if (!this._events) return false;\n    var handler = this._events[type];\n    if (!handler) return false;\n\n    if (typeof handler == 'function') {\n      switch (arguments.length) {\n        // fast cases\n        case 1:\n          handler.call(this);\n          break;\n        case 2:\n          handler.call(this, arguments[1]);\n          break;\n        case 3:\n          handler.call(this, arguments[1], arguments[2]);\n          break;\n        // slower\n        default:\n          var l = arguments.length;\n          var args = new Array(l - 1);\n          for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n          handler.apply(this, args);\n      }\n      return true;\n    } else if (isArray(handler)) {\n      var l = arguments.length;\n      var args = new Array(l - 1);\n      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\n      var listeners = handler.slice();\n      for (var i = 0, l = listeners.length; i < l; i++) {\n        listeners[i].apply(this, args);\n      }\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  EventEmitter.prototype.on = function(type, listener) {\n    if ('function' !== typeof listener) {\n      throw new Error('addListener only takes instances of Function');\n    }\n\n    if (!this._events) this._events = {};\n\n    // To avoid recursion in the case that type == \"newListeners\"! Before\n    // adding it to the listeners, first emit \"newListeners\".\n    if (this._events.newListener) {\n      this.emit('newListener', type, typeof listener.listener === 'function' ?\n                listener.listener : listener);\n    }\n\n    if (!this._events[type]) {\n      // Optimize the case of one listener. Don't need the extra array object.\n      this._events[type] = listener;\n    } else if (isArray(this._events[type])) {\n\n      // If we've already got an array, just append.\n      this._events[type].push(listener);\n\n    } else {\n      // Adding the second element, need to change to array.\n      this._events[type] = [this._events[type], listener];\n\n    }\n\n    // Check for listener leak\n    if (isArray(this._events[type]) && !this._events[type].warned) {\n      var m;\n      if (this._maxListeners !== undefined) {\n        m = this._maxListeners;\n      } else {\n        m = defaultMaxListeners;\n      }\n\n      if (m && m > 0 && this._events[type].length > m) {\n        this._events[type].warned = true;\n        console.error('(node) warning: possible EventEmitter memory ' +\n                      'leak detected. %d listeners added. ' +\n                      'Use emitter.setMaxListeners() to increase limit.',\n                      this._events[type].length);\n        console.trace();\n      }\n    }\n\n    return this;\n  };\n\n  function Socket(url) {\n    this.url = url;\n  }\n  util.inherits(Socket, EventEmitter);\n  Socket.prototype._emit = EventEmitter.prototype.emit;\n\n  Socket.prototype.emit = function(event, options) {\n    var self = this;\n    var params = { _uuid:self.uuid };\n    $.extend(params, options);\n    \n    $.getJSON('/_comet.io/' + event, params, function(payload) {\n      //self._wait();\n    });\n  };\n  \n  Socket.prototype.connect = function() {\n    var self = this;\n    $.ajax({\n      url: '/_comet.io/_connect',\n      data: null,\n      cache: false,\n      success: function(payload) {\n          self.uuid = payload.uuid;\n          self._wait();\n          self._emit('connect');\n        },\n      dataType: \"json\"\n    });\n  };\n  \n  Socket.prototype._wait = function() {\n    var self = this;\n    $.ajax({\n      url: '/_comet.io/_wait',\n      data: { uuid:self.uuid },\n      cache: false,\n      success: function(payload) {\n          self._wait();\n          if (payload) {\n            self._emit(payload.event, payload.params);\n          }\n        },\n      error: function(obj, textStatus, error) {\n          if (textStatus == 'timeout') {\n            self._wait();\n          } else {\n            console.error(textStatus, obj.responseText);\n          }\n        },\n      dataType: \"json\"\n    });\n  };\n  \n  return {\n    connect: function(url) {\n      var socket = new Socket(url);\n      socket.connect();\n      return socket;\n    }\n  };\n})();\n"}